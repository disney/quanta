// Code generated by protoc-gen-go. DO NOT EDIT.
// source: quanta.proto

package quanta

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryFragment_OpType int32

const (
	QueryFragment_INTERSECT  QueryFragment_OpType = 0
	QueryFragment_UNION      QueryFragment_OpType = 1
	QueryFragment_DIFFERENCE QueryFragment_OpType = 2
	QueryFragment_INNER_JOIN QueryFragment_OpType = 3
	QueryFragment_OUTER_JOIN QueryFragment_OpType = 4
)

var QueryFragment_OpType_name = map[int32]string{
	0: "INTERSECT",
	1: "UNION",
	2: "DIFFERENCE",
	3: "INNER_JOIN",
	4: "OUTER_JOIN",
}

var QueryFragment_OpType_value = map[string]int32{
	"INTERSECT":  0,
	"UNION":      1,
	"DIFFERENCE": 2,
	"INNER_JOIN": 3,
	"OUTER_JOIN": 4,
}

func (x QueryFragment_OpType) String() string {
	return proto.EnumName(QueryFragment_OpType_name, int32(x))
}

func (QueryFragment_OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{4, 0}
}

type QueryFragment_BSIOp int32

const (
	QueryFragment_NA       QueryFragment_BSIOp = 0
	QueryFragment_LT       QueryFragment_BSIOp = 1
	QueryFragment_LE       QueryFragment_BSIOp = 2
	QueryFragment_EQ       QueryFragment_BSIOp = 3
	QueryFragment_GE       QueryFragment_BSIOp = 4
	QueryFragment_GT       QueryFragment_BSIOp = 5
	QueryFragment_RANGE    QueryFragment_BSIOp = 6
	QueryFragment_BATCH_EQ QueryFragment_BSIOp = 7
)

var QueryFragment_BSIOp_name = map[int32]string{
	0: "NA",
	1: "LT",
	2: "LE",
	3: "EQ",
	4: "GE",
	5: "GT",
	6: "RANGE",
	7: "BATCH_EQ",
}

var QueryFragment_BSIOp_value = map[string]int32{
	"NA":       0,
	"LT":       1,
	"LE":       2,
	"EQ":       3,
	"GE":       4,
	"GT":       5,
	"RANGE":    6,
	"BATCH_EQ": 7,
}

func (x QueryFragment_BSIOp) String() string {
	return proto.EnumName(QueryFragment_BSIOp_name, int32(x))
}

func (QueryFragment_BSIOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{4, 1}
}

type Success struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{0}
}

func (m *Success) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Success.Unmarshal(m, b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Success.Marshal(b, m, deterministic)
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return xxx_messageInfo_Success.Size(m)
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type StatusMessage struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusMessage) Reset()         { *m = StatusMessage{} }
func (m *StatusMessage) String() string { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()    {}
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{1}
}

func (m *StatusMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusMessage.Unmarshal(m, b)
}
func (m *StatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusMessage.Marshal(b, m, deterministic)
}
func (m *StatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusMessage.Merge(m, src)
}
func (m *StatusMessage) XXX_Size() int {
	return xxx_messageInfo_StatusMessage.Size(m)
}
func (m *StatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StatusMessage proto.InternalMessageInfo

func (m *StatusMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type IndexKVPair struct {
	IndexPath            string   `protobuf:"bytes,1,opt,name=indexPath,proto3" json:"indexPath,omitempty"`
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                [][]byte `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	Time                 int64    `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	IsClear              bool     `protobuf:"varint,5,opt,name=isClear,proto3" json:"isClear,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexKVPair) Reset()         { *m = IndexKVPair{} }
func (m *IndexKVPair) String() string { return proto.CompactTextString(m) }
func (*IndexKVPair) ProtoMessage()    {}
func (*IndexKVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{2}
}

func (m *IndexKVPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexKVPair.Unmarshal(m, b)
}
func (m *IndexKVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexKVPair.Marshal(b, m, deterministic)
}
func (m *IndexKVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexKVPair.Merge(m, src)
}
func (m *IndexKVPair) XXX_Size() int {
	return xxx_messageInfo_IndexKVPair.Size(m)
}
func (m *IndexKVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexKVPair.DiscardUnknown(m)
}

var xxx_messageInfo_IndexKVPair proto.InternalMessageInfo

func (m *IndexKVPair) GetIndexPath() string {
	if m != nil {
		return m.IndexPath
	}
	return ""
}

func (m *IndexKVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *IndexKVPair) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *IndexKVPair) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *IndexKVPair) GetIsClear() bool {
	if m != nil {
		return m.IsClear
	}
	return false
}

type BitmapQuery struct {
	Query                []*QueryFragment `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	FromTime             int64            `protobuf:"varint,2,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime               int64            `protobuf:"varint,3,opt,name=toTime,proto3" json:"toTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BitmapQuery) Reset()         { *m = BitmapQuery{} }
func (m *BitmapQuery) String() string { return proto.CompactTextString(m) }
func (*BitmapQuery) ProtoMessage()    {}
func (*BitmapQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{3}
}

func (m *BitmapQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitmapQuery.Unmarshal(m, b)
}
func (m *BitmapQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitmapQuery.Marshal(b, m, deterministic)
}
func (m *BitmapQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitmapQuery.Merge(m, src)
}
func (m *BitmapQuery) XXX_Size() int {
	return xxx_messageInfo_BitmapQuery.Size(m)
}
func (m *BitmapQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BitmapQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BitmapQuery proto.InternalMessageInfo

func (m *BitmapQuery) GetQuery() []*QueryFragment {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *BitmapQuery) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *BitmapQuery) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

type QueryFragment struct {
	Index                string               `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Field                string               `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	RowID                uint64               `protobuf:"varint,3,opt,name=rowID,proto3" json:"rowID,omitempty"`
	Value                int64                `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Id                   string               `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	ChildrenIds          []string             `protobuf:"bytes,12,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
	Operation            QueryFragment_OpType `protobuf:"varint,5,opt,name=operation,proto3,enum=quanta.QueryFragment_OpType" json:"operation,omitempty"`
	BsiOp                QueryFragment_BSIOp  `protobuf:"varint,6,opt,name=bsiOp,proto3,enum=quanta.QueryFragment_BSIOp" json:"bsiOp,omitempty"`
	Begin                int64                `protobuf:"varint,7,opt,name=begin,proto3" json:"begin,omitempty"`
	End                  int64                `protobuf:"varint,8,opt,name=end,proto3" json:"end,omitempty"`
	Fk                   string               `protobuf:"bytes,9,opt,name=fk,proto3" json:"fk,omitempty"`
	Values               []int64              `protobuf:"varint,10,rep,packed,name=values,proto3" json:"values,omitempty"`
	SamplePct            float32              `protobuf:"fixed32,13,opt,name=samplePct,proto3" json:"samplePct,omitempty"`
	NullCheck            bool                 `protobuf:"varint,14,opt,name=nullCheck,proto3" json:"nullCheck,omitempty"`
	Negate               bool                 `protobuf:"varint,15,opt,name=negate,proto3" json:"negate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryFragment) Reset()         { *m = QueryFragment{} }
func (m *QueryFragment) String() string { return proto.CompactTextString(m) }
func (*QueryFragment) ProtoMessage()    {}
func (*QueryFragment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{4}
}

func (m *QueryFragment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryFragment.Unmarshal(m, b)
}
func (m *QueryFragment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryFragment.Marshal(b, m, deterministic)
}
func (m *QueryFragment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFragment.Merge(m, src)
}
func (m *QueryFragment) XXX_Size() int {
	return xxx_messageInfo_QueryFragment.Size(m)
}
func (m *QueryFragment) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFragment.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFragment proto.InternalMessageInfo

func (m *QueryFragment) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *QueryFragment) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *QueryFragment) GetRowID() uint64 {
	if m != nil {
		return m.RowID
	}
	return 0
}

func (m *QueryFragment) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *QueryFragment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryFragment) GetChildrenIds() []string {
	if m != nil {
		return m.ChildrenIds
	}
	return nil
}

func (m *QueryFragment) GetOperation() QueryFragment_OpType {
	if m != nil {
		return m.Operation
	}
	return QueryFragment_INTERSECT
}

func (m *QueryFragment) GetBsiOp() QueryFragment_BSIOp {
	if m != nil {
		return m.BsiOp
	}
	return QueryFragment_NA
}

func (m *QueryFragment) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *QueryFragment) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *QueryFragment) GetFk() string {
	if m != nil {
		return m.Fk
	}
	return ""
}

func (m *QueryFragment) GetValues() []int64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *QueryFragment) GetSamplePct() float32 {
	if m != nil {
		return m.SamplePct
	}
	return 0
}

func (m *QueryFragment) GetNullCheck() bool {
	if m != nil {
		return m.NullCheck
	}
	return false
}

func (m *QueryFragment) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

type QueryResult struct {
	Unions               []byte          `protobuf:"bytes,1,opt,name=unions,proto3" json:"unions,omitempty"`
	Intersects           [][]byte        `protobuf:"bytes,2,rep,name=intersects,proto3" json:"intersects,omitempty"`
	Differences          []byte          `protobuf:"bytes,3,opt,name=differences,proto3" json:"differences,omitempty"`
	Samples              []*BitmapResult `protobuf:"bytes,4,rep,name=samples,proto3" json:"samples,omitempty"`
	SamplePct            float32         `protobuf:"fixed32,5,opt,name=samplePct,proto3" json:"samplePct,omitempty"`
	SampleIsUnion        bool            `protobuf:"varint,6,opt,name=sampleIsUnion,proto3" json:"sampleIsUnion,omitempty"`
	Existences           []byte          `protobuf:"bytes,7,opt,name=existences,proto3" json:"existences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{5}
}

func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetUnions() []byte {
	if m != nil {
		return m.Unions
	}
	return nil
}

func (m *QueryResult) GetIntersects() [][]byte {
	if m != nil {
		return m.Intersects
	}
	return nil
}

func (m *QueryResult) GetDifferences() []byte {
	if m != nil {
		return m.Differences
	}
	return nil
}

func (m *QueryResult) GetSamples() []*BitmapResult {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *QueryResult) GetSamplePct() float32 {
	if m != nil {
		return m.SamplePct
	}
	return 0
}

func (m *QueryResult) GetSampleIsUnion() bool {
	if m != nil {
		return m.SampleIsUnion
	}
	return false
}

func (m *QueryResult) GetExistences() []byte {
	if m != nil {
		return m.Existences
	}
	return nil
}

type JoinRequest struct {
	DriverIndex          string   `protobuf:"bytes,1,opt,name=driverIndex,proto3" json:"driverIndex,omitempty"`
	FkFields             []string `protobuf:"bytes,2,rep,name=fkFields,proto3" json:"fkFields,omitempty"`
	FromTime             int64    `protobuf:"varint,3,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime               int64    `protobuf:"varint,4,opt,name=toTime,proto3" json:"toTime,omitempty"`
	FoundSet             []byte   `protobuf:"bytes,5,opt,name=foundSet,proto3" json:"foundSet,omitempty"`
	FilterSets           [][]byte `protobuf:"bytes,6,rep,name=filterSets,proto3" json:"filterSets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{6}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetDriverIndex() string {
	if m != nil {
		return m.DriverIndex
	}
	return ""
}

func (m *JoinRequest) GetFkFields() []string {
	if m != nil {
		return m.FkFields
	}
	return nil
}

func (m *JoinRequest) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *JoinRequest) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

func (m *JoinRequest) GetFoundSet() []byte {
	if m != nil {
		return m.FoundSet
	}
	return nil
}

func (m *JoinRequest) GetFilterSets() [][]byte {
	if m != nil {
		return m.FilterSets
	}
	return nil
}

type JoinResponse struct {
	Results              [][]byte `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{7}
}

func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResponse.Unmarshal(m, b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return xxx_messageInfo_JoinResponse.Size(m)
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetResults() [][]byte {
	if m != nil {
		return m.Results
	}
	return nil
}

type BulkClearRequest struct {
	Index                string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	FromTime             int64    `protobuf:"varint,2,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime               int64    `protobuf:"varint,3,opt,name=toTime,proto3" json:"toTime,omitempty"`
	FoundSet             []byte   `protobuf:"bytes,4,opt,name=foundSet,proto3" json:"foundSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BulkClearRequest) Reset()         { *m = BulkClearRequest{} }
func (m *BulkClearRequest) String() string { return proto.CompactTextString(m) }
func (*BulkClearRequest) ProtoMessage()    {}
func (*BulkClearRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{8}
}

func (m *BulkClearRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BulkClearRequest.Unmarshal(m, b)
}
func (m *BulkClearRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BulkClearRequest.Marshal(b, m, deterministic)
}
func (m *BulkClearRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkClearRequest.Merge(m, src)
}
func (m *BulkClearRequest) XXX_Size() int {
	return xxx_messageInfo_BulkClearRequest.Size(m)
}
func (m *BulkClearRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkClearRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BulkClearRequest proto.InternalMessageInfo

func (m *BulkClearRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *BulkClearRequest) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *BulkClearRequest) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

func (m *BulkClearRequest) GetFoundSet() []byte {
	if m != nil {
		return m.FoundSet
	}
	return nil
}

type UpdateRequest struct {
	Index                string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	ColumnId             uint64   `protobuf:"varint,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
	RowIdOrValue         int64    `protobuf:"varint,4,opt,name=rowIdOrValue,proto3" json:"rowIdOrValue,omitempty"`
	Time                 int64    `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{9}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *UpdateRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateRequest) GetColumnId() uint64 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func (m *UpdateRequest) GetRowIdOrValue() int64 {
	if m != nil {
		return m.RowIdOrValue
	}
	return 0
}

func (m *UpdateRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ProjectionRequest struct {
	FromTime             int64    `protobuf:"varint,1,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime               int64    `protobuf:"varint,2,opt,name=toTime,proto3" json:"toTime,omitempty"`
	FoundSet             []byte   `protobuf:"bytes,3,opt,name=foundSet,proto3" json:"foundSet,omitempty"`
	Index                string   `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	Fields               []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectionRequest) Reset()         { *m = ProjectionRequest{} }
func (m *ProjectionRequest) String() string { return proto.CompactTextString(m) }
func (*ProjectionRequest) ProtoMessage()    {}
func (*ProjectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{10}
}

func (m *ProjectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectionRequest.Unmarshal(m, b)
}
func (m *ProjectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectionRequest.Marshal(b, m, deterministic)
}
func (m *ProjectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectionRequest.Merge(m, src)
}
func (m *ProjectionRequest) XXX_Size() int {
	return xxx_messageInfo_ProjectionRequest.Size(m)
}
func (m *ProjectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectionRequest proto.InternalMessageInfo

func (m *ProjectionRequest) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *ProjectionRequest) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

func (m *ProjectionRequest) GetFoundSet() []byte {
	if m != nil {
		return m.FoundSet
	}
	return nil
}

func (m *ProjectionRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ProjectionRequest) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type BitmapResult struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	RowId                uint64   `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
	Bitmap               []byte   `protobuf:"bytes,3,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitmapResult) Reset()         { *m = BitmapResult{} }
func (m *BitmapResult) String() string { return proto.CompactTextString(m) }
func (*BitmapResult) ProtoMessage()    {}
func (*BitmapResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{11}
}

func (m *BitmapResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitmapResult.Unmarshal(m, b)
}
func (m *BitmapResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitmapResult.Marshal(b, m, deterministic)
}
func (m *BitmapResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitmapResult.Merge(m, src)
}
func (m *BitmapResult) XXX_Size() int {
	return xxx_messageInfo_BitmapResult.Size(m)
}
func (m *BitmapResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BitmapResult.DiscardUnknown(m)
}

var xxx_messageInfo_BitmapResult proto.InternalMessageInfo

func (m *BitmapResult) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *BitmapResult) GetRowId() uint64 {
	if m != nil {
		return m.RowId
	}
	return 0
}

func (m *BitmapResult) GetBitmap() []byte {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

type BSIResult struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Bitmaps              [][]byte `protobuf:"bytes,2,rep,name=bitmaps,proto3" json:"bitmaps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BSIResult) Reset()         { *m = BSIResult{} }
func (m *BSIResult) String() string { return proto.CompactTextString(m) }
func (*BSIResult) ProtoMessage()    {}
func (*BSIResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{12}
}

func (m *BSIResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BSIResult.Unmarshal(m, b)
}
func (m *BSIResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BSIResult.Marshal(b, m, deterministic)
}
func (m *BSIResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BSIResult.Merge(m, src)
}
func (m *BSIResult) XXX_Size() int {
	return xxx_messageInfo_BSIResult.Size(m)
}
func (m *BSIResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BSIResult.DiscardUnknown(m)
}

var xxx_messageInfo_BSIResult proto.InternalMessageInfo

func (m *BSIResult) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *BSIResult) GetBitmaps() [][]byte {
	if m != nil {
		return m.Bitmaps
	}
	return nil
}

type ProjectionResponse struct {
	BitmapResults        []*BitmapResult `protobuf:"bytes,1,rep,name=bitmapResults,proto3" json:"bitmapResults,omitempty"`
	BsiResults           []*BSIResult    `protobuf:"bytes,2,rep,name=bsiResults,proto3" json:"bsiResults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProjectionResponse) Reset()         { *m = ProjectionResponse{} }
func (m *ProjectionResponse) String() string { return proto.CompactTextString(m) }
func (*ProjectionResponse) ProtoMessage()    {}
func (*ProjectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{13}
}

func (m *ProjectionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectionResponse.Unmarshal(m, b)
}
func (m *ProjectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectionResponse.Marshal(b, m, deterministic)
}
func (m *ProjectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectionResponse.Merge(m, src)
}
func (m *ProjectionResponse) XXX_Size() int {
	return xxx_messageInfo_ProjectionResponse.Size(m)
}
func (m *ProjectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectionResponse proto.InternalMessageInfo

func (m *ProjectionResponse) GetBitmapResults() []*BitmapResult {
	if m != nil {
		return m.BitmapResults
	}
	return nil
}

func (m *ProjectionResponse) GetBsiResults() []*BSIResult {
	if m != nil {
		return m.BsiResults
	}
	return nil
}

type CheckoutSequenceRequest struct {
	Index                string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	PkField              string   `protobuf:"bytes,2,opt,name=pkField,proto3" json:"pkField,omitempty"`
	Time                 int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	ReservationSize      uint32   `protobuf:"varint,4,opt,name=reservationSize,proto3" json:"reservationSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckoutSequenceRequest) Reset()         { *m = CheckoutSequenceRequest{} }
func (m *CheckoutSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*CheckoutSequenceRequest) ProtoMessage()    {}
func (*CheckoutSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{14}
}

func (m *CheckoutSequenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckoutSequenceRequest.Unmarshal(m, b)
}
func (m *CheckoutSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckoutSequenceRequest.Marshal(b, m, deterministic)
}
func (m *CheckoutSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutSequenceRequest.Merge(m, src)
}
func (m *CheckoutSequenceRequest) XXX_Size() int {
	return xxx_messageInfo_CheckoutSequenceRequest.Size(m)
}
func (m *CheckoutSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutSequenceRequest proto.InternalMessageInfo

func (m *CheckoutSequenceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CheckoutSequenceRequest) GetPkField() string {
	if m != nil {
		return m.PkField
	}
	return ""
}

func (m *CheckoutSequenceRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CheckoutSequenceRequest) GetReservationSize() uint32 {
	if m != nil {
		return m.ReservationSize
	}
	return 0
}

type CheckoutSequenceResponse struct {
	Start                uint64   `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Count                uint32   `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckoutSequenceResponse) Reset()         { *m = CheckoutSequenceResponse{} }
func (m *CheckoutSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*CheckoutSequenceResponse) ProtoMessage()    {}
func (*CheckoutSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8b37d0419adf27e, []int{15}
}

func (m *CheckoutSequenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckoutSequenceResponse.Unmarshal(m, b)
}
func (m *CheckoutSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckoutSequenceResponse.Marshal(b, m, deterministic)
}
func (m *CheckoutSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutSequenceResponse.Merge(m, src)
}
func (m *CheckoutSequenceResponse) XXX_Size() int {
	return xxx_messageInfo_CheckoutSequenceResponse.Size(m)
}
func (m *CheckoutSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutSequenceResponse proto.InternalMessageInfo

func (m *CheckoutSequenceResponse) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CheckoutSequenceResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterEnum("quanta.QueryFragment_OpType", QueryFragment_OpType_name, QueryFragment_OpType_value)
	proto.RegisterEnum("quanta.QueryFragment_BSIOp", QueryFragment_BSIOp_name, QueryFragment_BSIOp_value)
	proto.RegisterType((*Success)(nil), "quanta.Success")
	proto.RegisterType((*StatusMessage)(nil), "quanta.StatusMessage")
	proto.RegisterType((*IndexKVPair)(nil), "quanta.IndexKVPair")
	proto.RegisterType((*BitmapQuery)(nil), "quanta.BitmapQuery")
	proto.RegisterType((*QueryFragment)(nil), "quanta.QueryFragment")
	proto.RegisterType((*QueryResult)(nil), "quanta.QueryResult")
	proto.RegisterType((*JoinRequest)(nil), "quanta.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "quanta.JoinResponse")
	proto.RegisterType((*BulkClearRequest)(nil), "quanta.BulkClearRequest")
	proto.RegisterType((*UpdateRequest)(nil), "quanta.UpdateRequest")
	proto.RegisterType((*ProjectionRequest)(nil), "quanta.ProjectionRequest")
	proto.RegisterType((*BitmapResult)(nil), "quanta.BitmapResult")
	proto.RegisterType((*BSIResult)(nil), "quanta.BSIResult")
	proto.RegisterType((*ProjectionResponse)(nil), "quanta.ProjectionResponse")
	proto.RegisterType((*CheckoutSequenceRequest)(nil), "quanta.CheckoutSequenceRequest")
	proto.RegisterType((*CheckoutSequenceResponse)(nil), "quanta.CheckoutSequenceResponse")
}

func init() { proto.RegisterFile("quanta.proto", fileDescriptor_e8b37d0419adf27e) }

var fileDescriptor_e8b37d0419adf27e = []byte{
	// 1390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0x49, 0x89, 0xb2, 0x46, 0x94, 0xc3, 0x6c, 0x9c, 0x7c, 0x8c, 0x12, 0xe4, 0x13, 0x88,
	0x0f, 0x5f, 0x05, 0x14, 0x50, 0x12, 0x27, 0x28, 0x90, 0x04, 0x4d, 0x61, 0x39, 0x72, 0xc2, 0xfc,
	0x91, 0xe5, 0x95, 0x9c, 0x1e, 0x03, 0x9a, 0x5c, 0xc9, 0xac, 0x24, 0x92, 0xe1, 0x2e, 0x93, 0xb8,
	0xb7, 0xa2, 0x87, 0x1e, 0x8b, 0xbe, 0x41, 0x5f, 0xa1, 0xe7, 0xbe, 0x45, 0xfb, 0x38, 0xbd, 0x14,
	0xbb, 0x4b, 0x4a, 0x94, 0x2d, 0xa9, 0x48, 0x4f, 0xe4, 0x6f, 0x76, 0x66, 0x76, 0x66, 0x76, 0xe6,
	0xb7, 0x0b, 0xc6, 0xfb, 0xd4, 0x0d, 0x99, 0xdb, 0x8e, 0x93, 0x88, 0x45, 0x48, 0x97, 0xa8, 0x71,
	0x6b, 0x1c, 0x45, 0xe3, 0x29, 0xb9, 0x2b, 0xa4, 0xa7, 0xe9, 0xe8, 0x2e, 0x99, 0xc5, 0xec, 0x5c,
	0x2a, 0x35, 0xee, 0x5c, 0x5c, 0xfc, 0x98, 0xb8, 0x71, 0x4c, 0x12, 0x2a, 0xd7, 0xed, 0x9b, 0x50,
	0x19, 0xa4, 0x9e, 0x47, 0x28, 0x45, 0x3b, 0xa0, 0x46, 0x13, 0x4b, 0x69, 0x2a, 0xad, 0x6d, 0xac,
	0x46, 0x13, 0xfb, 0x0b, 0xa8, 0x0f, 0x98, 0xcb, 0x52, 0xfa, 0x86, 0x50, 0xea, 0x8e, 0x09, 0xba,
	0x01, 0x3a, 0x15, 0x02, 0xa1, 0x54, 0xc5, 0x19, 0xb2, 0x7f, 0x50, 0xa0, 0xe6, 0x84, 0x3e, 0xf9,
	0xf4, 0xea, 0x6d, 0xdf, 0x0d, 0x12, 0x74, 0x1b, 0xaa, 0x01, 0x87, 0x7d, 0x97, 0x9d, 0x65, 0xaa,
	0x0b, 0x01, 0x32, 0x41, 0x9b, 0x90, 0x73, 0x4b, 0x6d, 0x2a, 0x2d, 0x03, 0xf3, 0x5f, 0xb4, 0x0b,
	0xe5, 0x0f, 0xee, 0x34, 0x25, 0x96, 0xd6, 0xd4, 0x5a, 0x06, 0x96, 0x00, 0x21, 0x28, 0xb1, 0x60,
	0x46, 0xac, 0x52, 0x53, 0x69, 0x69, 0x58, 0xfc, 0x23, 0x0b, 0x2a, 0x01, 0x3d, 0x98, 0x12, 0x37,
	0xb1, 0xca, 0x22, 0xce, 0x1c, 0xda, 0x21, 0xd4, 0x3a, 0x01, 0x9b, 0xb9, 0xf1, 0x71, 0x4a, 0x92,
	0x73, 0xf4, 0x25, 0x94, 0xdf, 0xf3, 0x1f, 0x4b, 0x69, 0x6a, 0xad, 0xda, 0xde, 0xf5, 0x76, 0x56,
	0x39, 0xb1, 0x7a, 0x98, 0xb8, 0xe3, 0x19, 0x09, 0x19, 0x96, 0x3a, 0xa8, 0x01, 0xdb, 0xa3, 0x24,
	0x9a, 0x0d, 0xf9, 0x6e, 0xaa, 0xd8, 0x6d, 0x8e, 0x79, 0xce, 0x2c, 0x12, 0x2b, 0x9a, 0x58, 0xc9,
	0x90, 0xfd, 0x47, 0x09, 0xea, 0x4b, 0xce, 0x78, 0x16, 0x22, 0xc9, 0x2c, 0x63, 0x09, 0xb8, 0x74,
	0x14, 0x90, 0xa9, 0x2f, 0x1c, 0x57, 0xb1, 0x04, 0x5c, 0x9a, 0x44, 0x1f, 0x9d, 0x67, 0xc2, 0x69,
	0x09, 0x4b, 0xb0, 0xa8, 0x83, 0x4c, 0x39, 0xab, 0xc3, 0x0e, 0xa8, 0x81, 0x6f, 0xd5, 0x84, 0xb9,
	0x1a, 0xf8, 0xa8, 0x09, 0x35, 0xef, 0x2c, 0x98, 0xfa, 0x09, 0x09, 0x1d, 0x9f, 0x5a, 0x46, 0x53,
	0x6b, 0x55, 0x71, 0x51, 0x84, 0x1e, 0x43, 0x35, 0x8a, 0x49, 0xe2, 0xb2, 0x20, 0x0a, 0x45, 0x9d,
	0x76, 0xf6, 0x6e, 0xaf, 0x2c, 0x40, 0xfb, 0x28, 0x1e, 0x9e, 0xc7, 0x04, 0x2f, 0xd4, 0xd1, 0x7d,
	0x28, 0x9f, 0xd2, 0xe0, 0x28, 0xb6, 0x74, 0x61, 0x77, 0x6b, 0xb5, 0x5d, 0x67, 0xe0, 0x1c, 0xc5,
	0x58, 0x6a, 0xf2, 0xb0, 0x4f, 0xc9, 0x38, 0x08, 0xad, 0x8a, 0x0c, 0x5b, 0x00, 0x7e, 0xcc, 0x24,
	0xf4, 0xad, 0x6d, 0x21, 0xe3, 0xbf, 0x3c, 0x91, 0xd1, 0xc4, 0xaa, 0xca, 0x44, 0x46, 0x13, 0x5e,
	0x5a, 0x91, 0x21, 0xb5, 0xa0, 0xa9, 0xf1, 0xd2, 0x4a, 0xc4, 0xdb, 0x87, 0xba, 0xb3, 0x78, 0x4a,
	0xfa, 0x1e, 0xb3, 0xea, 0x4d, 0xa5, 0xa5, 0xe2, 0x85, 0x80, 0xaf, 0x86, 0xe9, 0x74, 0x7a, 0x70,
	0x46, 0xbc, 0x89, 0xb5, 0x23, 0x9a, 0x60, 0x21, 0xe0, 0x3e, 0x43, 0x32, 0x76, 0x19, 0xb1, 0xae,
	0x88, 0xa5, 0x0c, 0xd9, 0x18, 0x74, 0x99, 0x2b, 0xaa, 0x43, 0xd5, 0xe9, 0x0d, 0xbb, 0x78, 0xd0,
	0x3d, 0x18, 0x9a, 0x5b, 0xa8, 0x0a, 0xe5, 0x93, 0x9e, 0x73, 0xd4, 0x33, 0x15, 0xb4, 0x03, 0xf0,
	0xcc, 0x39, 0x3c, 0xec, 0xe2, 0x6e, 0xef, 0xa0, 0x6b, 0xaa, 0x1c, 0x3b, 0xbd, 0x5e, 0x17, 0xbf,
	0x7b, 0x79, 0xe4, 0xf4, 0x4c, 0x8d, 0xe3, 0xa3, 0x93, 0x61, 0x8e, 0x4b, 0x76, 0x1f, 0xca, 0xa2,
	0x0e, 0x48, 0x07, 0xb5, 0xb7, 0x6f, 0x6e, 0xf1, 0xef, 0xeb, 0xa1, 0xa9, 0x88, 0x2f, 0x77, 0xa0,
	0x83, 0xda, 0x3d, 0x36, 0x35, 0xfe, 0x7d, 0xde, 0x35, 0x4b, 0xe2, 0x3b, 0x34, 0xcb, 0x7c, 0x4f,
	0xbc, 0xdf, 0x7b, 0xde, 0x35, 0x75, 0x64, 0xc0, 0x76, 0x67, 0x7f, 0x78, 0xf0, 0xe2, 0x5d, 0xf7,
	0xd8, 0xac, 0xd8, 0x7f, 0x29, 0x50, 0x13, 0x85, 0xc6, 0x84, 0xa6, 0x53, 0xc6, 0xb3, 0x49, 0xc3,
	0x20, 0x0a, 0xe5, 0xc0, 0x19, 0x38, 0x43, 0xe8, 0x0e, 0x40, 0x10, 0x32, 0x92, 0x50, 0xe2, 0x31,
	0x6a, 0xa9, 0x62, 0x6a, 0x0a, 0x12, 0xde, 0x22, 0x7e, 0x30, 0x1a, 0x91, 0x84, 0x84, 0x1e, 0xa1,
	0xa2, 0xc9, 0x0c, 0x5c, 0x14, 0xa1, 0x36, 0x54, 0x64, 0x49, 0xa9, 0x55, 0x12, 0x13, 0xb2, 0x9b,
	0x1f, 0xb4, 0x9c, 0x22, 0x19, 0x00, 0xce, 0x95, 0x96, 0xcf, 0xa4, 0x7c, 0xf1, 0x4c, 0xfe, 0x07,
	0x75, 0x09, 0x1c, 0x7a, 0xc2, 0x23, 0x14, 0xcd, 0xb3, 0x8d, 0x97, 0x85, 0x3c, 0x6a, 0xf2, 0x29,
	0xa0, 0x4c, 0x06, 0x55, 0x11, 0x41, 0x15, 0x24, 0xf6, 0xef, 0x0a, 0xd4, 0x5e, 0x46, 0x41, 0x88,
	0xc9, 0xfb, 0x94, 0x50, 0x26, 0xb2, 0x48, 0x82, 0x0f, 0x24, 0x71, 0x0a, 0x63, 0x55, 0x14, 0x89,
	0xc1, 0x9d, 0x1c, 0xf2, 0x89, 0x92, 0x55, 0xa8, 0xe2, 0x39, 0x5e, 0x1a, 0x6a, 0x6d, 0xed, 0x50,
	0x97, 0x8a, 0x43, 0x2d, 0x6c, 0xa2, 0x34, 0xf4, 0x07, 0x44, 0x26, 0x69, 0xe0, 0x39, 0xe6, 0xd1,
	0x8f, 0x82, 0x29, 0x23, 0xc9, 0x80, 0x30, 0x6a, 0xe9, 0xb2, 0xe6, 0x0b, 0x89, 0xdd, 0x02, 0x43,
	0x06, 0x4f, 0xe3, 0x28, 0xa4, 0x82, 0xaa, 0x12, 0x51, 0x44, 0x2a, 0x38, 0xc8, 0xc0, 0x39, 0xb4,
	0x3f, 0x81, 0xd9, 0x49, 0xa7, 0x13, 0xc1, 0x5b, 0x79, 0xae, 0xab, 0xc9, 0xe3, 0x5f, 0x10, 0xd3,
	0x52, 0x0e, 0xa5, 0xe5, 0x1c, 0xec, 0x9f, 0x15, 0xa8, 0x9f, 0xc4, 0xbe, 0xcb, 0xc8, 0xe6, 0x7d,
	0x57, 0x93, 0x56, 0x03, 0xb6, 0xbd, 0x68, 0x9a, 0xce, 0x42, 0xc7, 0xcf, 0x78, 0x6b, 0x8e, 0x91,
	0x0d, 0x06, 0xe7, 0x30, 0xff, 0x28, 0x79, 0x5b, 0x60, 0xb0, 0x25, 0xd9, 0x9c, 0xd0, 0xcb, 0x0b,
	0x42, 0xb7, 0x7f, 0x51, 0xe0, 0x6a, 0x3f, 0x89, 0xbe, 0x23, 0x1e, 0x67, 0x9f, 0x3c, 0xaa, 0x62,
	0xde, 0xca, 0xda, 0xbc, 0xd5, 0xb5, 0x79, 0x6b, 0x17, 0xce, 0x6e, 0x9e, 0x65, 0xa9, 0x98, 0xe5,
	0x0d, 0xd0, 0x47, 0xb2, 0x77, 0xca, 0xa2, 0x77, 0x32, 0x64, 0x63, 0x30, 0x8a, 0x43, 0xb0, 0xa8,
	0x86, 0xb2, 0x82, 0xc2, 0x65, 0x8d, 0x32, 0x0a, 0xf7, 0xb9, 0xcf, 0x53, 0x61, 0x9b, 0xc5, 0x90,
	0x21, 0xfb, 0x09, 0x54, 0x3b, 0x03, 0x67, 0xa3, 0x43, 0x0b, 0x2a, 0x52, 0x39, 0x9f, 0xe8, 0x1c,
	0xda, 0x3f, 0x2a, 0x80, 0x8a, 0x45, 0xca, 0x3a, 0xec, 0x31, 0xd4, 0x4f, 0x0b, 0x71, 0xd2, 0xec,
	0xae, 0x5b, 0x3d, 0xc9, 0xcb, 0xaa, 0xe8, 0x3e, 0xc0, 0x29, 0x0d, 0x72, 0x43, 0x55, 0x18, 0x5e,
	0x9d, 0x1b, 0xe6, 0x91, 0xe2, 0x82, 0x92, 0xfd, 0x93, 0x02, 0xff, 0x11, 0x24, 0x1b, 0xa5, 0x6c,
	0xc0, 0x0f, 0x2a, 0xf4, 0xfe, 0xa1, 0x8d, 0x2c, 0xa8, 0xc4, 0x72, 0x1c, 0xb3, 0x46, 0xca, 0xe1,
	0xbc, 0x15, 0xb4, 0xc2, 0xdd, 0xde, 0x82, 0x2b, 0x09, 0xa1, 0x24, 0xf9, 0x20, 0x2e, 0xa2, 0x41,
	0xf0, 0xbd, 0xec, 0xa2, 0x3a, 0xbe, 0x28, 0xb6, 0x0f, 0xc1, 0xba, 0x1c, 0x48, 0x56, 0x94, 0x5d,
	0x28, 0x53, 0xe6, 0x26, 0x2c, 0xbf, 0x59, 0x05, 0xe0, 0x52, 0x2f, 0x4a, 0x43, 0x96, 0x79, 0x94,
	0x60, 0xcf, 0x01, 0xe3, 0x60, 0x9a, 0x52, 0x46, 0x92, 0x7d, 0x7f, 0x16, 0x84, 0xe8, 0x11, 0xe8,
	0xf2, 0xc1, 0x83, 0x6e, 0xb4, 0xe5, 0xb3, 0xa9, 0x9d, 0x3f, 0x9b, 0xda, 0x5d, 0xfe, 0xa6, 0x6a,
	0xcc, 0xdf, 0x11, 0x4b, 0x0f, 0x23, 0x7b, 0x6b, 0xef, 0x37, 0x15, 0x2a, 0xaf, 0xde, 0x0e, 0x58,
	0x94, 0x10, 0xf4, 0x10, 0xb4, 0x7e, 0xca, 0xd0, 0xb5, 0x5c, 0xb7, 0xf0, 0x34, 0x6a, 0xac, 0x71,
	0x6c, 0x6f, 0xa1, 0x27, 0xb0, 0xdd, 0x71, 0x99, 0x77, 0xf6, 0xf9, 0xa6, 0x2d, 0x05, 0x3d, 0x04,
	0xfd, 0x75, 0x14, 0x4d, 0xd2, 0x78, 0xb5, 0xe9, 0x2a, 0xa1, 0xbd, 0x85, 0xbe, 0x86, 0x9a, 0xd8,
	0xf2, 0xf3, 0x4d, 0x5b, 0xca, 0x3d, 0x05, 0x3d, 0x85, 0xb2, 0xc3, 0xc8, 0x8c, 0xa2, 0xdb, 0x97,
	0x22, 0x1b, 0xb0, 0x24, 0x08, 0xc7, 0x62, 0xec, 0xd7, 0x78, 0xb8, 0xa7, 0xec, 0xfd, 0xaa, 0x80,
	0x21, 0x15, 0x07, 0xc4, 0x4d, 0xbc, 0x33, 0x74, 0x08, 0x20, 0xe2, 0x91, 0xe4, 0xbe, 0xd9, 0xeb,
	0xa6, 0x6a, 0xbc, 0x00, 0x3d, 0xf3, 0xb8, 0xd9, 0xc7, 0xe5, 0xd5, 0x13, 0x27, 0x64, 0x5f, 0x3d,
	0x14, 0xab, 0x22, 0xc4, 0x3f, 0xb5, 0xfc, 0x59, 0x29, 0x63, 0x7a, 0x04, 0xba, 0xe4, 0x4f, 0x34,
	0xef, 0x84, 0x25, 0x3e, 0xdd, 0x70, 0xbe, 0x4f, 0xb3, 0x62, 0xbf, 0x49, 0x19, 0xb7, 0xff, 0xec,
	0x23, 0xfe, 0x06, 0xaa, 0xf3, 0x5b, 0x03, 0x59, 0xf3, 0x51, 0xbd, 0x70, 0x91, 0x6c, 0x08, 0xe0,
	0x01, 0x94, 0xe5, 0xdb, 0xf8, 0xda, 0x32, 0x41, 0x08, 0xe1, 0xe2, 0x94, 0x0a, 0xef, 0x0f, 0x61,
	0x54, 0xe2, 0xb7, 0xda, 0xc2, 0xa6, 0x70, 0x41, 0x37, 0x76, 0x97, 0x85, 0x72, 0x02, 0xed, 0x2d,
	0xd4, 0x05, 0x58, 0xd0, 0x15, 0xba, 0x99, 0x6b, 0x5d, 0xe2, 0xf9, 0x46, 0x63, 0xd5, 0xd2, 0xdc,
	0xcd, 0xb7, 0x60, 0x5e, 0x1c, 0x73, 0xf4, 0xdf, 0xdc, 0x62, 0x0d, 0x13, 0x35, 0x9a, 0xeb, 0x15,
	0x72, 0xc7, 0x9d, 0xff, 0xc3, 0xf5, 0x20, 0x6a, 0x8f, 0x93, 0xd8, 0x6b, 0xfb, 0x01, 0x0d, 0xc9,
	0x79, 0x66, 0xd3, 0xa9, 0x1d, 0x8b, 0x6f, 0x9f, 0x97, 0xae, 0xaf, 0x9c, 0xea, 0xa2, 0x86, 0x0f,
	0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xee, 0x9b, 0xf5, 0x77, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterAdminClient is the client API for ClusterAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterAdminClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusMessage, error)
}

type clusterAdminClient struct {
	cc *grpc.ClientConn
}

func NewClusterAdminClient(cc *grpc.ClientConn) ClusterAdminClient {
	return &clusterAdminClient{cc}
}

func (c *clusterAdminClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/quanta.ClusterAdmin/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAdminServer is the server API for ClusterAdmin service.
type ClusterAdminServer interface {
	Status(context.Context, *empty.Empty) (*StatusMessage, error)
}

// UnimplementedClusterAdminServer can be embedded to have forward compatible implementations.
type UnimplementedClusterAdminServer struct {
}

func (*UnimplementedClusterAdminServer) Status(ctx context.Context, req *empty.Empty) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterClusterAdminServer(s *grpc.Server, srv ClusterAdminServer) {
	s.RegisterService(&_ClusterAdmin_serviceDesc, srv)
}

func _ClusterAdmin_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAdminServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.ClusterAdmin/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAdminServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quanta.ClusterAdmin",
	HandlerType: (*ClusterAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ClusterAdmin_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quanta.proto",
}

// KVStoreClient is the client API for KVStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVStoreClient interface {
	Put(ctx context.Context, in *IndexKVPair, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchPut(ctx context.Context, opts ...grpc.CallOption) (KVStore_BatchPutClient, error)
	Lookup(ctx context.Context, in *IndexKVPair, opts ...grpc.CallOption) (*IndexKVPair, error)
	BatchLookup(ctx context.Context, opts ...grpc.CallOption) (KVStore_BatchLookupClient, error)
	Items(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (KVStore_ItemsClient, error)
}

type kVStoreClient struct {
	cc *grpc.ClientConn
}

func NewKVStoreClient(cc *grpc.ClientConn) KVStoreClient {
	return &kVStoreClient{cc}
}

func (c *kVStoreClient) Put(ctx context.Context, in *IndexKVPair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/quanta.KVStore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStoreClient) BatchPut(ctx context.Context, opts ...grpc.CallOption) (KVStore_BatchPutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVStore_serviceDesc.Streams[0], "/quanta.KVStore/BatchPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVStoreBatchPutClient{stream}
	return x, nil
}

type KVStore_BatchPutClient interface {
	Send(*IndexKVPair) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type kVStoreBatchPutClient struct {
	grpc.ClientStream
}

func (x *kVStoreBatchPutClient) Send(m *IndexKVPair) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVStoreBatchPutClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVStoreClient) Lookup(ctx context.Context, in *IndexKVPair, opts ...grpc.CallOption) (*IndexKVPair, error) {
	out := new(IndexKVPair)
	err := c.cc.Invoke(ctx, "/quanta.KVStore/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStoreClient) BatchLookup(ctx context.Context, opts ...grpc.CallOption) (KVStore_BatchLookupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVStore_serviceDesc.Streams[1], "/quanta.KVStore/BatchLookup", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVStoreBatchLookupClient{stream}
	return x, nil
}

type KVStore_BatchLookupClient interface {
	Send(*IndexKVPair) error
	Recv() (*IndexKVPair, error)
	grpc.ClientStream
}

type kVStoreBatchLookupClient struct {
	grpc.ClientStream
}

func (x *kVStoreBatchLookupClient) Send(m *IndexKVPair) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVStoreBatchLookupClient) Recv() (*IndexKVPair, error) {
	m := new(IndexKVPair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVStoreClient) Items(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (KVStore_ItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVStore_serviceDesc.Streams[2], "/quanta.KVStore/Items", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVStoreItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KVStore_ItemsClient interface {
	Recv() (*IndexKVPair, error)
	grpc.ClientStream
}

type kVStoreItemsClient struct {
	grpc.ClientStream
}

func (x *kVStoreItemsClient) Recv() (*IndexKVPair, error) {
	m := new(IndexKVPair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KVStoreServer is the server API for KVStore service.
type KVStoreServer interface {
	Put(context.Context, *IndexKVPair) (*empty.Empty, error)
	BatchPut(KVStore_BatchPutServer) error
	Lookup(context.Context, *IndexKVPair) (*IndexKVPair, error)
	BatchLookup(KVStore_BatchLookupServer) error
	Items(*wrappers.StringValue, KVStore_ItemsServer) error
}

// UnimplementedKVStoreServer can be embedded to have forward compatible implementations.
type UnimplementedKVStoreServer struct {
}

func (*UnimplementedKVStoreServer) Put(ctx context.Context, req *IndexKVPair) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedKVStoreServer) BatchPut(srv KVStore_BatchPutServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchPut not implemented")
}
func (*UnimplementedKVStoreServer) Lookup(ctx context.Context, req *IndexKVPair) (*IndexKVPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedKVStoreServer) BatchLookup(srv KVStore_BatchLookupServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchLookup not implemented")
}
func (*UnimplementedKVStoreServer) Items(req *wrappers.StringValue, srv KVStore_ItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method Items not implemented")
}

func RegisterKVStoreServer(s *grpc.Server, srv KVStoreServer) {
	s.RegisterService(&_KVStore_serviceDesc, srv)
}

func _KVStore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexKVPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.KVStore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStoreServer).Put(ctx, req.(*IndexKVPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStore_BatchPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVStoreServer).BatchPut(&kVStoreBatchPutServer{stream})
}

type KVStore_BatchPutServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*IndexKVPair, error)
	grpc.ServerStream
}

type kVStoreBatchPutServer struct {
	grpc.ServerStream
}

func (x *kVStoreBatchPutServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVStoreBatchPutServer) Recv() (*IndexKVPair, error) {
	m := new(IndexKVPair)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KVStore_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexKVPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStoreServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.KVStore/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStoreServer).Lookup(ctx, req.(*IndexKVPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStore_BatchLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVStoreServer).BatchLookup(&kVStoreBatchLookupServer{stream})
}

type KVStore_BatchLookupServer interface {
	Send(*IndexKVPair) error
	Recv() (*IndexKVPair, error)
	grpc.ServerStream
}

type kVStoreBatchLookupServer struct {
	grpc.ServerStream
}

func (x *kVStoreBatchLookupServer) Send(m *IndexKVPair) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVStoreBatchLookupServer) Recv() (*IndexKVPair, error) {
	m := new(IndexKVPair)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KVStore_Items_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVStoreServer).Items(m, &kVStoreItemsServer{stream})
}

type KVStore_ItemsServer interface {
	Send(*IndexKVPair) error
	grpc.ServerStream
}

type kVStoreItemsServer struct {
	grpc.ServerStream
}

func (x *kVStoreItemsServer) Send(m *IndexKVPair) error {
	return x.ServerStream.SendMsg(m)
}

var _KVStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quanta.KVStore",
	HandlerType: (*KVStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KVStore_Put_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _KVStore_Lookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchPut",
			Handler:       _KVStore_BatchPut_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchLookup",
			Handler:       _KVStore_BatchLookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Items",
			Handler:       _KVStore_Items_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "quanta.proto",
}

// StringSearchClient is the client API for StringSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StringSearchClient interface {
	BatchIndex(ctx context.Context, opts ...grpc.CallOption) (StringSearch_BatchIndexClient, error)
	Search(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (StringSearch_SearchClient, error)
}

type stringSearchClient struct {
	cc *grpc.ClientConn
}

func NewStringSearchClient(cc *grpc.ClientConn) StringSearchClient {
	return &stringSearchClient{cc}
}

func (c *stringSearchClient) BatchIndex(ctx context.Context, opts ...grpc.CallOption) (StringSearch_BatchIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StringSearch_serviceDesc.Streams[0], "/quanta.StringSearch/BatchIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &stringSearchBatchIndexClient{stream}
	return x, nil
}

type StringSearch_BatchIndexClient interface {
	Send(*wrappers.StringValue) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type stringSearchBatchIndexClient struct {
	grpc.ClientStream
}

func (x *stringSearchBatchIndexClient) Send(m *wrappers.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stringSearchBatchIndexClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stringSearchClient) Search(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (StringSearch_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StringSearch_serviceDesc.Streams[1], "/quanta.StringSearch/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &stringSearchSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StringSearch_SearchClient interface {
	Recv() (*wrappers.UInt64Value, error)
	grpc.ClientStream
}

type stringSearchSearchClient struct {
	grpc.ClientStream
}

func (x *stringSearchSearchClient) Recv() (*wrappers.UInt64Value, error) {
	m := new(wrappers.UInt64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StringSearchServer is the server API for StringSearch service.
type StringSearchServer interface {
	BatchIndex(StringSearch_BatchIndexServer) error
	Search(*wrappers.StringValue, StringSearch_SearchServer) error
}

// UnimplementedStringSearchServer can be embedded to have forward compatible implementations.
type UnimplementedStringSearchServer struct {
}

func (*UnimplementedStringSearchServer) BatchIndex(srv StringSearch_BatchIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchIndex not implemented")
}
func (*UnimplementedStringSearchServer) Search(req *wrappers.StringValue, srv StringSearch_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterStringSearchServer(s *grpc.Server, srv StringSearchServer) {
	s.RegisterService(&_StringSearch_serviceDesc, srv)
}

func _StringSearch_BatchIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StringSearchServer).BatchIndex(&stringSearchBatchIndexServer{stream})
}

type StringSearch_BatchIndexServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.StringValue, error)
	grpc.ServerStream
}

type stringSearchBatchIndexServer struct {
	grpc.ServerStream
}

func (x *stringSearchBatchIndexServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stringSearchBatchIndexServer) Recv() (*wrappers.StringValue, error) {
	m := new(wrappers.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StringSearch_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StringSearchServer).Search(m, &stringSearchSearchServer{stream})
}

type StringSearch_SearchServer interface {
	Send(*wrappers.UInt64Value) error
	grpc.ServerStream
}

type stringSearchSearchServer struct {
	grpc.ServerStream
}

func (x *stringSearchSearchServer) Send(m *wrappers.UInt64Value) error {
	return x.ServerStream.SendMsg(m)
}

var _StringSearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quanta.StringSearch",
	HandlerType: (*StringSearchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchIndex",
			Handler:       _StringSearch_BatchIndex_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _StringSearch_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "quanta.proto",
}

// BitmapIndexClient is the client API for BitmapIndex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BitmapIndexClient interface {
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchMutate(ctx context.Context, opts ...grpc.CallOption) (BitmapIndex_BatchMutateClient, error)
	BulkClear(ctx context.Context, in *BulkClearRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Query(ctx context.Context, in *BitmapQuery, opts ...grpc.CallOption) (*QueryResult, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Projection(ctx context.Context, in *ProjectionRequest, opts ...grpc.CallOption) (*ProjectionResponse, error)
	CheckoutSequence(ctx context.Context, in *CheckoutSequenceRequest, opts ...grpc.CallOption) (*CheckoutSequenceResponse, error)
}

type bitmapIndexClient struct {
	cc *grpc.ClientConn
}

func NewBitmapIndexClient(cc *grpc.ClientConn) BitmapIndexClient {
	return &bitmapIndexClient{cc}
}

func (c *bitmapIndexClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/quanta.BitmapIndex/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitmapIndexClient) BatchMutate(ctx context.Context, opts ...grpc.CallOption) (BitmapIndex_BatchMutateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BitmapIndex_serviceDesc.Streams[0], "/quanta.BitmapIndex/BatchMutate", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitmapIndexBatchMutateClient{stream}
	return x, nil
}

type BitmapIndex_BatchMutateClient interface {
	Send(*IndexKVPair) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type bitmapIndexBatchMutateClient struct {
	grpc.ClientStream
}

func (x *bitmapIndexBatchMutateClient) Send(m *IndexKVPair) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitmapIndexBatchMutateClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bitmapIndexClient) BulkClear(ctx context.Context, in *BulkClearRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/quanta.BitmapIndex/BulkClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitmapIndexClient) Query(ctx context.Context, in *BitmapQuery, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/quanta.BitmapIndex/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitmapIndexClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/quanta.BitmapIndex/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitmapIndexClient) Projection(ctx context.Context, in *ProjectionRequest, opts ...grpc.CallOption) (*ProjectionResponse, error) {
	out := new(ProjectionResponse)
	err := c.cc.Invoke(ctx, "/quanta.BitmapIndex/Projection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitmapIndexClient) CheckoutSequence(ctx context.Context, in *CheckoutSequenceRequest, opts ...grpc.CallOption) (*CheckoutSequenceResponse, error) {
	out := new(CheckoutSequenceResponse)
	err := c.cc.Invoke(ctx, "/quanta.BitmapIndex/CheckoutSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitmapIndexServer is the server API for BitmapIndex service.
type BitmapIndexServer interface {
	Update(context.Context, *UpdateRequest) (*empty.Empty, error)
	BatchMutate(BitmapIndex_BatchMutateServer) error
	BulkClear(context.Context, *BulkClearRequest) (*empty.Empty, error)
	Query(context.Context, *BitmapQuery) (*QueryResult, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Projection(context.Context, *ProjectionRequest) (*ProjectionResponse, error)
	CheckoutSequence(context.Context, *CheckoutSequenceRequest) (*CheckoutSequenceResponse, error)
}

// UnimplementedBitmapIndexServer can be embedded to have forward compatible implementations.
type UnimplementedBitmapIndexServer struct {
}

func (*UnimplementedBitmapIndexServer) Update(ctx context.Context, req *UpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBitmapIndexServer) BatchMutate(srv BitmapIndex_BatchMutateServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchMutate not implemented")
}
func (*UnimplementedBitmapIndexServer) BulkClear(ctx context.Context, req *BulkClearRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkClear not implemented")
}
func (*UnimplementedBitmapIndexServer) Query(ctx context.Context, req *BitmapQuery) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedBitmapIndexServer) Join(ctx context.Context, req *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedBitmapIndexServer) Projection(ctx context.Context, req *ProjectionRequest) (*ProjectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Projection not implemented")
}
func (*UnimplementedBitmapIndexServer) CheckoutSequence(ctx context.Context, req *CheckoutSequenceRequest) (*CheckoutSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutSequence not implemented")
}

func RegisterBitmapIndexServer(s *grpc.Server, srv BitmapIndexServer) {
	s.RegisterService(&_BitmapIndex_serviceDesc, srv)
}

func _BitmapIndex_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmapIndexServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.BitmapIndex/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmapIndexServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitmapIndex_BatchMutate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitmapIndexServer).BatchMutate(&bitmapIndexBatchMutateServer{stream})
}

type BitmapIndex_BatchMutateServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*IndexKVPair, error)
	grpc.ServerStream
}

type bitmapIndexBatchMutateServer struct {
	grpc.ServerStream
}

func (x *bitmapIndexBatchMutateServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitmapIndexBatchMutateServer) Recv() (*IndexKVPair, error) {
	m := new(IndexKVPair)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BitmapIndex_BulkClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmapIndexServer).BulkClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.BitmapIndex/BulkClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmapIndexServer).BulkClear(ctx, req.(*BulkClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitmapIndex_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BitmapQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmapIndexServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.BitmapIndex/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmapIndexServer).Query(ctx, req.(*BitmapQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitmapIndex_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmapIndexServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.BitmapIndex/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmapIndexServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitmapIndex_Projection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmapIndexServer).Projection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.BitmapIndex/Projection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmapIndexServer).Projection(ctx, req.(*ProjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitmapIndex_CheckoutSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitmapIndexServer).CheckoutSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quanta.BitmapIndex/CheckoutSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitmapIndexServer).CheckoutSequence(ctx, req.(*CheckoutSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BitmapIndex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quanta.BitmapIndex",
	HandlerType: (*BitmapIndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _BitmapIndex_Update_Handler,
		},
		{
			MethodName: "BulkClear",
			Handler:    _BitmapIndex_BulkClear_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _BitmapIndex_Query_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _BitmapIndex_Join_Handler,
		},
		{
			MethodName: "Projection",
			Handler:    _BitmapIndex_Projection_Handler,
		},
		{
			MethodName: "CheckoutSequence",
			Handler:    _BitmapIndex_CheckoutSequence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchMutate",
			Handler:       _BitmapIndex_BatchMutate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "quanta.proto",
}
