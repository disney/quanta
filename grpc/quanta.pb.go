// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: quanta.proto

package shared

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryFragment_OpType int32

const (
	QueryFragment_INTERSECT  QueryFragment_OpType = 0
	QueryFragment_UNION      QueryFragment_OpType = 1
	QueryFragment_DIFFERENCE QueryFragment_OpType = 2
	QueryFragment_INNER_JOIN QueryFragment_OpType = 3
	QueryFragment_OUTER_JOIN QueryFragment_OpType = 4
)

// Enum value maps for QueryFragment_OpType.
var (
	QueryFragment_OpType_name = map[int32]string{
		0: "INTERSECT",
		1: "UNION",
		2: "DIFFERENCE",
		3: "INNER_JOIN",
		4: "OUTER_JOIN",
	}
	QueryFragment_OpType_value = map[string]int32{
		"INTERSECT":  0,
		"UNION":      1,
		"DIFFERENCE": 2,
		"INNER_JOIN": 3,
		"OUTER_JOIN": 4,
	}
)

func (x QueryFragment_OpType) Enum() *QueryFragment_OpType {
	p := new(QueryFragment_OpType)
	*p = x
	return p
}

func (x QueryFragment_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryFragment_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_quanta_proto_enumTypes[0].Descriptor()
}

func (QueryFragment_OpType) Type() protoreflect.EnumType {
	return &file_quanta_proto_enumTypes[0]
}

func (x QueryFragment_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryFragment_OpType.Descriptor instead.
func (QueryFragment_OpType) EnumDescriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{4, 0}
}

type QueryFragment_BSIOp int32

const (
	QueryFragment_NA       QueryFragment_BSIOp = 0
	QueryFragment_LT       QueryFragment_BSIOp = 1
	QueryFragment_LE       QueryFragment_BSIOp = 2
	QueryFragment_EQ       QueryFragment_BSIOp = 3
	QueryFragment_GE       QueryFragment_BSIOp = 4
	QueryFragment_GT       QueryFragment_BSIOp = 5
	QueryFragment_RANGE    QueryFragment_BSIOp = 6
	QueryFragment_BATCH_EQ QueryFragment_BSIOp = 7
)

// Enum value maps for QueryFragment_BSIOp.
var (
	QueryFragment_BSIOp_name = map[int32]string{
		0: "NA",
		1: "LT",
		2: "LE",
		3: "EQ",
		4: "GE",
		5: "GT",
		6: "RANGE",
		7: "BATCH_EQ",
	}
	QueryFragment_BSIOp_value = map[string]int32{
		"NA":       0,
		"LT":       1,
		"LE":       2,
		"EQ":       3,
		"GE":       4,
		"GT":       5,
		"RANGE":    6,
		"BATCH_EQ": 7,
	}
)

func (x QueryFragment_BSIOp) Enum() *QueryFragment_BSIOp {
	p := new(QueryFragment_BSIOp)
	*p = x
	return p
}

func (x QueryFragment_BSIOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryFragment_BSIOp) Descriptor() protoreflect.EnumDescriptor {
	return file_quanta_proto_enumTypes[1].Descriptor()
}

func (QueryFragment_BSIOp) Type() protoreflect.EnumType {
	return &file_quanta_proto_enumTypes[1]
}

func (x QueryFragment_BSIOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryFragment_BSIOp.Descriptor instead.
func (QueryFragment_BSIOp) EnumDescriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{4, 1}
}

type TableOperationRequest_OpType int32

const (
	TableOperationRequest_DEPLOY   TableOperationRequest_OpType = 0
	TableOperationRequest_DROP     TableOperationRequest_OpType = 1
	TableOperationRequest_TRUNCATE TableOperationRequest_OpType = 2
)

// Enum value maps for TableOperationRequest_OpType.
var (
	TableOperationRequest_OpType_name = map[int32]string{
		0: "DEPLOY",
		1: "DROP",
		2: "TRUNCATE",
	}
	TableOperationRequest_OpType_value = map[string]int32{
		"DEPLOY":   0,
		"DROP":     1,
		"TRUNCATE": 2,
	}
)

func (x TableOperationRequest_OpType) Enum() *TableOperationRequest_OpType {
	p := new(TableOperationRequest_OpType)
	*p = x
	return p
}

func (x TableOperationRequest_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableOperationRequest_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_quanta_proto_enumTypes[2].Descriptor()
}

func (TableOperationRequest_OpType) Type() protoreflect.EnumType {
	return &file_quanta_proto_enumTypes[2]
}

func (x TableOperationRequest_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableOperationRequest_OpType.Descriptor instead.
func (TableOperationRequest_OpType) EnumDescriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{5, 0}
}

type StatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeState  string `protobuf:"bytes,1,opt,name=nodeState,proto3" json:"nodeState,omitempty"`
	LocalIP    string `protobuf:"bytes,2,opt,name=localIP,proto3" json:"localIP,omitempty"`
	LocalPort  uint32 `protobuf:"varint,3,opt,name=localPort,proto3" json:"localPort,omitempty"`
	Version    string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Replicas   uint32 `protobuf:"varint,5,opt,name=replicas,proto3" json:"replicas,omitempty"`
	ShardCount uint32 `protobuf:"varint,6,opt,name=shardCount,proto3" json:"shardCount,omitempty"`
	MemoryUsed uint32 `protobuf:"varint,7,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{0}
}

func (x *StatusMessage) GetNodeState() string {
	if x != nil {
		return x.NodeState
	}
	return ""
}

func (x *StatusMessage) GetLocalIP() string {
	if x != nil {
		return x.LocalIP
	}
	return ""
}

func (x *StatusMessage) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *StatusMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StatusMessage) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *StatusMessage) GetShardCount() uint32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *StatusMessage) GetMemoryUsed() uint32 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

type IndexKVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexPath string   `protobuf:"bytes,1,opt,name=indexPath,proto3" json:"indexPath,omitempty"`
	Key       []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     [][]byte `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	Time      int64    `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	IsClear   bool     `protobuf:"varint,5,opt,name=isClear,proto3" json:"isClear,omitempty"`
	Sync      bool     `protobuf:"varint,6,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *IndexKVPair) Reset() {
	*x = IndexKVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexKVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexKVPair) ProtoMessage() {}

func (x *IndexKVPair) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexKVPair.ProtoReflect.Descriptor instead.
func (*IndexKVPair) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{1}
}

func (x *IndexKVPair) GetIndexPath() string {
	if x != nil {
		return x.IndexPath
	}
	return ""
}

func (x *IndexKVPair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IndexKVPair) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IndexKVPair) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IndexKVPair) GetIsClear() bool {
	if x != nil {
		return x.IsClear
	}
	return false
}

func (x *IndexKVPair) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type StringEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexPath string `protobuf:"bytes,1,opt,name=indexPath,proto3" json:"indexPath,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringEnum) Reset() {
	*x = StringEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringEnum) ProtoMessage() {}

func (x *StringEnum) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringEnum.ProtoReflect.Descriptor instead.
func (*StringEnum) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{2}
}

func (x *StringEnum) GetIndexPath() string {
	if x != nil {
		return x.IndexPath
	}
	return ""
}

func (x *StringEnum) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BitmapQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    []*QueryFragment `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	FromTime int64            `protobuf:"varint,2,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime   int64            `protobuf:"varint,3,opt,name=toTime,proto3" json:"toTime,omitempty"`
}

func (x *BitmapQuery) Reset() {
	*x = BitmapQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitmapQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitmapQuery) ProtoMessage() {}

func (x *BitmapQuery) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitmapQuery.ProtoReflect.Descriptor instead.
func (*BitmapQuery) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{3}
}

func (x *BitmapQuery) GetQuery() []*QueryFragment {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *BitmapQuery) GetFromTime() int64 {
	if x != nil {
		return x.FromTime
	}
	return 0
}

func (x *BitmapQuery) GetToTime() int64 {
	if x != nil {
		return x.ToTime
	}
	return 0
}

type QueryFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       string               `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Field       string               `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	RowID       uint64               `protobuf:"varint,3,opt,name=rowID,proto3" json:"rowID,omitempty"`
	Value       int64                `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Id          string               `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	ChildrenIds []string             `protobuf:"bytes,12,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
	Operation   QueryFragment_OpType `protobuf:"varint,5,opt,name=operation,proto3,enum=shared.QueryFragment_OpType" json:"operation,omitempty"`
	BsiOp       QueryFragment_BSIOp  `protobuf:"varint,6,opt,name=bsiOp,proto3,enum=shared.QueryFragment_BSIOp" json:"bsiOp,omitempty"`
	Begin       int64                `protobuf:"varint,7,opt,name=begin,proto3" json:"begin,omitempty"`
	End         int64                `protobuf:"varint,8,opt,name=end,proto3" json:"end,omitempty"`
	Fk          string               `protobuf:"bytes,9,opt,name=fk,proto3" json:"fk,omitempty"`
	Values      []int64              `protobuf:"varint,10,rep,packed,name=values,proto3" json:"values,omitempty"`
	SamplePct   float32              `protobuf:"fixed32,13,opt,name=samplePct,proto3" json:"samplePct,omitempty"`
	NullCheck   bool                 `protobuf:"varint,14,opt,name=nullCheck,proto3" json:"nullCheck,omitempty"`
	Negate      bool                 `protobuf:"varint,15,opt,name=negate,proto3" json:"negate,omitempty"`
	OrContext   bool                 `protobuf:"varint,16,opt,name=orContext,proto3" json:"orContext,omitempty"`
}

func (x *QueryFragment) Reset() {
	*x = QueryFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFragment) ProtoMessage() {}

func (x *QueryFragment) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFragment.ProtoReflect.Descriptor instead.
func (*QueryFragment) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{4}
}

func (x *QueryFragment) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *QueryFragment) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *QueryFragment) GetRowID() uint64 {
	if x != nil {
		return x.RowID
	}
	return 0
}

func (x *QueryFragment) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *QueryFragment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryFragment) GetChildrenIds() []string {
	if x != nil {
		return x.ChildrenIds
	}
	return nil
}

func (x *QueryFragment) GetOperation() QueryFragment_OpType {
	if x != nil {
		return x.Operation
	}
	return QueryFragment_INTERSECT
}

func (x *QueryFragment) GetBsiOp() QueryFragment_BSIOp {
	if x != nil {
		return x.BsiOp
	}
	return QueryFragment_NA
}

func (x *QueryFragment) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *QueryFragment) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *QueryFragment) GetFk() string {
	if x != nil {
		return x.Fk
	}
	return ""
}

func (x *QueryFragment) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *QueryFragment) GetSamplePct() float32 {
	if x != nil {
		return x.SamplePct
	}
	return 0
}

func (x *QueryFragment) GetNullCheck() bool {
	if x != nil {
		return x.NullCheck
	}
	return false
}

func (x *QueryFragment) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *QueryFragment) GetOrContext() bool {
	if x != nil {
		return x.OrContext
	}
	return false
}

type TableOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table     string                       `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Operation TableOperationRequest_OpType `protobuf:"varint,2,opt,name=operation,proto3,enum=shared.TableOperationRequest_OpType" json:"operation,omitempty"`
}

func (x *TableOperationRequest) Reset() {
	*x = TableOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableOperationRequest) ProtoMessage() {}

func (x *TableOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableOperationRequest.ProtoReflect.Descriptor instead.
func (*TableOperationRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{5}
}

func (x *TableOperationRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TableOperationRequest) GetOperation() TableOperationRequest_OpType {
	if x != nil {
		return x.Operation
	}
	return TableOperationRequest_DEPLOY
}

type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unions              []byte          `protobuf:"bytes,1,opt,name=unions,proto3" json:"unions,omitempty"`
	Intersects          [][]byte        `protobuf:"bytes,2,rep,name=intersects,proto3" json:"intersects,omitempty"`
	Differences         [][]byte        `protobuf:"bytes,3,rep,name=differences,proto3" json:"differences,omitempty"`
	Samples             []*BitmapResult `protobuf:"bytes,4,rep,name=samples,proto3" json:"samples,omitempty"`
	SamplePct           float32         `protobuf:"fixed32,5,opt,name=samplePct,proto3" json:"samplePct,omitempty"`
	SampleIsUnion       bool            `protobuf:"varint,6,opt,name=sampleIsUnion,proto3" json:"sampleIsUnion,omitempty"`
	Existences          []byte          `protobuf:"bytes,7,opt,name=existences,proto3" json:"existences,omitempty"`
	AndDifferencesCount int32           `protobuf:"varint,8,opt,name=andDifferencesCount,proto3" json:"andDifferencesCount,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{6}
}

func (x *QueryResult) GetUnions() []byte {
	if x != nil {
		return x.Unions
	}
	return nil
}

func (x *QueryResult) GetIntersects() [][]byte {
	if x != nil {
		return x.Intersects
	}
	return nil
}

func (x *QueryResult) GetDifferences() [][]byte {
	if x != nil {
		return x.Differences
	}
	return nil
}

func (x *QueryResult) GetSamples() []*BitmapResult {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *QueryResult) GetSamplePct() float32 {
	if x != nil {
		return x.SamplePct
	}
	return 0
}

func (x *QueryResult) GetSampleIsUnion() bool {
	if x != nil {
		return x.SampleIsUnion
	}
	return false
}

func (x *QueryResult) GetExistences() []byte {
	if x != nil {
		return x.Existences
	}
	return nil
}

func (x *QueryResult) GetAndDifferencesCount() int32 {
	if x != nil {
		return x.AndDifferencesCount
	}
	return 0
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverIndex string   `protobuf:"bytes,1,opt,name=driverIndex,proto3" json:"driverIndex,omitempty"`
	FkFields    []string `protobuf:"bytes,2,rep,name=fkFields,proto3" json:"fkFields,omitempty"`
	FromTime    int64    `protobuf:"varint,3,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime      int64    `protobuf:"varint,4,opt,name=toTime,proto3" json:"toTime,omitempty"`
	FoundSet    []byte   `protobuf:"bytes,5,opt,name=foundSet,proto3" json:"foundSet,omitempty"`
	FilterSets  [][]byte `protobuf:"bytes,6,rep,name=filterSets,proto3" json:"filterSets,omitempty"`
	Negate      bool     `protobuf:"varint,7,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{7}
}

func (x *JoinRequest) GetDriverIndex() string {
	if x != nil {
		return x.DriverIndex
	}
	return ""
}

func (x *JoinRequest) GetFkFields() []string {
	if x != nil {
		return x.FkFields
	}
	return nil
}

func (x *JoinRequest) GetFromTime() int64 {
	if x != nil {
		return x.FromTime
	}
	return 0
}

func (x *JoinRequest) GetToTime() int64 {
	if x != nil {
		return x.ToTime
	}
	return 0
}

func (x *JoinRequest) GetFoundSet() []byte {
	if x != nil {
		return x.FoundSet
	}
	return nil
}

func (x *JoinRequest) GetFilterSets() [][]byte {
	if x != nil {
		return x.FilterSets
	}
	return nil
}

func (x *JoinRequest) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results [][]byte `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{8}
}

func (x *JoinResponse) GetResults() [][]byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type BulkClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	FromTime int64  `protobuf:"varint,2,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime   int64  `protobuf:"varint,3,opt,name=toTime,proto3" json:"toTime,omitempty"`
	FoundSet []byte `protobuf:"bytes,4,opt,name=foundSet,proto3" json:"foundSet,omitempty"`
}

func (x *BulkClearRequest) Reset() {
	*x = BulkClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkClearRequest) ProtoMessage() {}

func (x *BulkClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkClearRequest.ProtoReflect.Descriptor instead.
func (*BulkClearRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{9}
}

func (x *BulkClearRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *BulkClearRequest) GetFromTime() int64 {
	if x != nil {
		return x.FromTime
	}
	return 0
}

func (x *BulkClearRequest) GetToTime() int64 {
	if x != nil {
		return x.ToTime
	}
	return 0
}

func (x *BulkClearRequest) GetFoundSet() []byte {
	if x != nil {
		return x.FoundSet
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Field        string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	ColumnId     uint64 `protobuf:"varint,3,opt,name=columnId,proto3" json:"columnId,omitempty"`
	RowIdOrValue int64  `protobuf:"varint,4,opt,name=rowIdOrValue,proto3" json:"rowIdOrValue,omitempty"`
	Time         int64  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *UpdateRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *UpdateRequest) GetColumnId() uint64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *UpdateRequest) GetRowIdOrValue() int64 {
	if x != nil {
		return x.RowIdOrValue
	}
	return 0
}

func (x *UpdateRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SyncStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Field       string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	RowId       uint64 `protobuf:"varint,3,opt,name=rowId,proto3" json:"rowId,omitempty"`
	Time        int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Cardinality uint64 `protobuf:"varint,5,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	BSIChecksum int64  `protobuf:"varint,6,opt,name=bSIChecksum,proto3" json:"bSIChecksum,omitempty"`
	ModTime     int64  `protobuf:"varint,7,opt,name=modTime,proto3" json:"modTime,omitempty"`
	SendData    bool   `protobuf:"varint,8,opt,name=sendData,proto3" json:"sendData,omitempty"`
}

func (x *SyncStatusRequest) Reset() {
	*x = SyncStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusRequest) ProtoMessage() {}

func (x *SyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusRequest.ProtoReflect.Descriptor instead.
func (*SyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{11}
}

func (x *SyncStatusRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *SyncStatusRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SyncStatusRequest) GetRowId() uint64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

func (x *SyncStatusRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SyncStatusRequest) GetCardinality() uint64 {
	if x != nil {
		return x.Cardinality
	}
	return 0
}

func (x *SyncStatusRequest) GetBSIChecksum() int64 {
	if x != nil {
		return x.BSIChecksum
	}
	return 0
}

func (x *SyncStatusRequest) GetModTime() int64 {
	if x != nil {
		return x.ModTime
	}
	return 0
}

func (x *SyncStatusRequest) GetSendData() bool {
	if x != nil {
		return x.SendData
	}
	return false
}

type SyncStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok          bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Cardinality uint64   `protobuf:"varint,2,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	BSIChecksum int64    `protobuf:"varint,3,opt,name=BSIChecksum,proto3" json:"BSIChecksum,omitempty"`
	ModTime     int64    `protobuf:"varint,4,opt,name=modTime,proto3" json:"modTime,omitempty"`
	Data        [][]byte `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SyncStatusResponse) Reset() {
	*x = SyncStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatusResponse) ProtoMessage() {}

func (x *SyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatusResponse.ProtoReflect.Descriptor instead.
func (*SyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{12}
}

func (x *SyncStatusResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SyncStatusResponse) GetCardinality() uint64 {
	if x != nil {
		return x.Cardinality
	}
	return 0
}

func (x *SyncStatusResponse) GetBSIChecksum() int64 {
	if x != nil {
		return x.BSIChecksum
	}
	return 0
}

func (x *SyncStatusResponse) GetModTime() int64 {
	if x != nil {
		return x.ModTime
	}
	return 0
}

func (x *SyncStatusResponse) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type IndexInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexPath string `protobuf:"bytes,1,opt,name=indexPath,proto3" json:"indexPath,omitempty"`
}

func (x *IndexInfoRequest) Reset() {
	*x = IndexInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfoRequest) ProtoMessage() {}

func (x *IndexInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfoRequest.ProtoReflect.Descriptor instead.
func (*IndexInfoRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{13}
}

func (x *IndexInfoRequest) GetIndexPath() string {
	if x != nil {
		return x.IndexPath
	}
	return ""
}

type IndexInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexPath      string `protobuf:"bytes,1,opt,name=indexPath,proto3" json:"indexPath,omitempty"`
	Exists         bool   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	WasOpen        bool   `protobuf:"varint,3,opt,name=wasOpen,proto3" json:"wasOpen,omitempty"`
	Count          uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Puts           int64  `protobuf:"varint,5,opt,name=puts,proto3" json:"puts,omitempty"`
	Gets           int64  `protobuf:"varint,6,opt,name=gets,proto3" json:"gets,omitempty"`
	Dels           int64  `protobuf:"varint,7,opt,name=dels,proto3" json:"dels,omitempty"`
	HashCollisions int64  `protobuf:"varint,8,opt,name=hashCollisions,proto3" json:"hashCollisions,omitempty"`
	FileSize       int64  `protobuf:"varint,9,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (x *IndexInfoResponse) Reset() {
	*x = IndexInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfoResponse) ProtoMessage() {}

func (x *IndexInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfoResponse.ProtoReflect.Descriptor instead.
func (*IndexInfoResponse) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{14}
}

func (x *IndexInfoResponse) GetIndexPath() string {
	if x != nil {
		return x.IndexPath
	}
	return ""
}

func (x *IndexInfoResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *IndexInfoResponse) GetWasOpen() bool {
	if x != nil {
		return x.WasOpen
	}
	return false
}

func (x *IndexInfoResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *IndexInfoResponse) GetPuts() int64 {
	if x != nil {
		return x.Puts
	}
	return 0
}

func (x *IndexInfoResponse) GetGets() int64 {
	if x != nil {
		return x.Gets
	}
	return 0
}

func (x *IndexInfoResponse) GetDels() int64 {
	if x != nil {
		return x.Dels
	}
	return 0
}

func (x *IndexInfoResponse) GetHashCollisions() int64 {
	if x != nil {
		return x.HashCollisions
	}
	return 0
}

func (x *IndexInfoResponse) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type ProjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTime int64    `protobuf:"varint,1,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToTime   int64    `protobuf:"varint,2,opt,name=toTime,proto3" json:"toTime,omitempty"`
	FoundSet []byte   `protobuf:"bytes,3,opt,name=foundSet,proto3" json:"foundSet,omitempty"`
	Index    string   `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	Fields   []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Negate   bool     `protobuf:"varint,6,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *ProjectionRequest) Reset() {
	*x = ProjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionRequest) ProtoMessage() {}

func (x *ProjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionRequest.ProtoReflect.Descriptor instead.
func (*ProjectionRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{15}
}

func (x *ProjectionRequest) GetFromTime() int64 {
	if x != nil {
		return x.FromTime
	}
	return 0
}

func (x *ProjectionRequest) GetToTime() int64 {
	if x != nil {
		return x.ToTime
	}
	return 0
}

func (x *ProjectionRequest) GetFoundSet() []byte {
	if x != nil {
		return x.FoundSet
	}
	return nil
}

func (x *ProjectionRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *ProjectionRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ProjectionRequest) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

type BitmapResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	RowId  uint64 `protobuf:"varint,2,opt,name=rowId,proto3" json:"rowId,omitempty"`
	Bitmap []byte `protobuf:"bytes,3,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
}

func (x *BitmapResult) Reset() {
	*x = BitmapResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitmapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitmapResult) ProtoMessage() {}

func (x *BitmapResult) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitmapResult.ProtoReflect.Descriptor instead.
func (*BitmapResult) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{16}
}

func (x *BitmapResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *BitmapResult) GetRowId() uint64 {
	if x != nil {
		return x.RowId
	}
	return 0
}

func (x *BitmapResult) GetBitmap() []byte {
	if x != nil {
		return x.Bitmap
	}
	return nil
}

type BSIResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Bitmaps [][]byte `protobuf:"bytes,2,rep,name=bitmaps,proto3" json:"bitmaps,omitempty"`
}

func (x *BSIResult) Reset() {
	*x = BSIResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BSIResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BSIResult) ProtoMessage() {}

func (x *BSIResult) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BSIResult.ProtoReflect.Descriptor instead.
func (*BSIResult) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{17}
}

func (x *BSIResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *BSIResult) GetBitmaps() [][]byte {
	if x != nil {
		return x.Bitmaps
	}
	return nil
}

type ProjectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitmapResults []*BitmapResult `protobuf:"bytes,1,rep,name=bitmapResults,proto3" json:"bitmapResults,omitempty"`
	BsiResults    []*BSIResult    `protobuf:"bytes,2,rep,name=bsiResults,proto3" json:"bsiResults,omitempty"`
}

func (x *ProjectionResponse) Reset() {
	*x = ProjectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionResponse) ProtoMessage() {}

func (x *ProjectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionResponse.ProtoReflect.Descriptor instead.
func (*ProjectionResponse) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{18}
}

func (x *ProjectionResponse) GetBitmapResults() []*BitmapResult {
	if x != nil {
		return x.BitmapResults
	}
	return nil
}

func (x *ProjectionResponse) GetBsiResults() []*BSIResult {
	if x != nil {
		return x.BsiResults
	}
	return nil
}

type CheckoutSequenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	PkField         string `protobuf:"bytes,2,opt,name=pkField,proto3" json:"pkField,omitempty"`
	Time            int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	ReservationSize uint32 `protobuf:"varint,4,opt,name=reservationSize,proto3" json:"reservationSize,omitempty"`
}

func (x *CheckoutSequenceRequest) Reset() {
	*x = CheckoutSequenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutSequenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutSequenceRequest) ProtoMessage() {}

func (x *CheckoutSequenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutSequenceRequest.ProtoReflect.Descriptor instead.
func (*CheckoutSequenceRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{19}
}

func (x *CheckoutSequenceRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *CheckoutSequenceRequest) GetPkField() string {
	if x != nil {
		return x.PkField
	}
	return ""
}

func (x *CheckoutSequenceRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CheckoutSequenceRequest) GetReservationSize() uint32 {
	if x != nil {
		return x.ReservationSize
	}
	return 0
}

type CheckoutSequenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Count uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CheckoutSequenceResponse) Reset() {
	*x = CheckoutSequenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutSequenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutSequenceResponse) ProtoMessage() {}

func (x *CheckoutSequenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutSequenceResponse.ProtoReflect.Descriptor instead.
func (*CheckoutSequenceResponse) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{20}
}

func (x *CheckoutSequenceResponse) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CheckoutSequenceResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteIndicesWithPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix      string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	RetainEnums bool   `protobuf:"varint,2,opt,name=retainEnums,proto3" json:"retainEnums,omitempty"`
}

func (x *DeleteIndicesWithPrefixRequest) Reset() {
	*x = DeleteIndicesWithPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quanta_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndicesWithPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndicesWithPrefixRequest) ProtoMessage() {}

func (x *DeleteIndicesWithPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quanta_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndicesWithPrefixRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndicesWithPrefixRequest) Descriptor() ([]byte, []int) {
	return file_quanta_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteIndicesWithPrefixRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DeleteIndicesWithPrefixRequest) GetRetainEnums() bool {
	if x != nil {
		return x.RetainEnums
	}
	return false
}

var File_quanta_proto protoreflect.FileDescriptor

var file_quanta_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x64, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x40, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x0b, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x77,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x73, 0x69, 0x4f, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x53, 0x49, 0x4f, 0x70, 0x52,
	0x05, 0x62, 0x73, 0x69, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x50, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x04, 0x22, 0x50, 0x0a, 0x05,
	0x42, 0x53, 0x49, 0x4f, 0x70, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a,
	0x02, 0x45, 0x51, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a,
	0x02, 0x47, 0x54, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x51, 0x10, 0x07, 0x22, 0x9f,
	0x01, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x22, 0xad, 0x02, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x6e, 0x64, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6e, 0x64,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x78, 0x0a, 0x10, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x4f, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x49,
	0x64, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a,
	0x11, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x53,
	0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x53, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x53, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x42, 0x53, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x10, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf9, 0x01,
	0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x0c, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x22, 0x3b, 0x0a, 0x09, 0x42, 0x53, 0x49,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x62,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0d, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x73, 0x69,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x53, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0a, 0x62, 0x73, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x32, 0x87, 0x01, 0x0a, 0x0c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x32, 0x97, 0x04, 0x0a, 0x07, 0x4b, 0x56, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x34, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x75, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x13, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x1a, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x13, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56, 0x50, 0x61,
	0x69, 0x72, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56,
	0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa0,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x46, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x48, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x32, 0xed, 0x05, 0x0a, 0x0b, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x39, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3f, 0x0a, 0x09,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x4c, 0x0a, 0x15, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x69, 0x73,
	0x6e, 0x65, 0x79, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x61, 0x42, 0x0b, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x2f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x61, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quanta_proto_rawDescOnce sync.Once
	file_quanta_proto_rawDescData = file_quanta_proto_rawDesc
)

func file_quanta_proto_rawDescGZIP() []byte {
	file_quanta_proto_rawDescOnce.Do(func() {
		file_quanta_proto_rawDescData = protoimpl.X.CompressGZIP(file_quanta_proto_rawDescData)
	})
	return file_quanta_proto_rawDescData
}

var file_quanta_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_quanta_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_quanta_proto_goTypes = []interface{}{
	(QueryFragment_OpType)(0),              // 0: shared.QueryFragment.OpType
	(QueryFragment_BSIOp)(0),               // 1: shared.QueryFragment.BSIOp
	(TableOperationRequest_OpType)(0),      // 2: shared.TableOperationRequest.OpType
	(*StatusMessage)(nil),                  // 3: shared.StatusMessage
	(*IndexKVPair)(nil),                    // 4: shared.IndexKVPair
	(*StringEnum)(nil),                     // 5: shared.StringEnum
	(*BitmapQuery)(nil),                    // 6: shared.BitmapQuery
	(*QueryFragment)(nil),                  // 7: shared.QueryFragment
	(*TableOperationRequest)(nil),          // 8: shared.TableOperationRequest
	(*QueryResult)(nil),                    // 9: shared.QueryResult
	(*JoinRequest)(nil),                    // 10: shared.JoinRequest
	(*JoinResponse)(nil),                   // 11: shared.JoinResponse
	(*BulkClearRequest)(nil),               // 12: shared.BulkClearRequest
	(*UpdateRequest)(nil),                  // 13: shared.UpdateRequest
	(*SyncStatusRequest)(nil),              // 14: shared.SyncStatusRequest
	(*SyncStatusResponse)(nil),             // 15: shared.SyncStatusResponse
	(*IndexInfoRequest)(nil),               // 16: shared.IndexInfoRequest
	(*IndexInfoResponse)(nil),              // 17: shared.IndexInfoResponse
	(*ProjectionRequest)(nil),              // 18: shared.ProjectionRequest
	(*BitmapResult)(nil),                   // 19: shared.BitmapResult
	(*BSIResult)(nil),                      // 20: shared.BSIResult
	(*ProjectionResponse)(nil),             // 21: shared.ProjectionResponse
	(*CheckoutSequenceRequest)(nil),        // 22: shared.CheckoutSequenceRequest
	(*CheckoutSequenceResponse)(nil),       // 23: shared.CheckoutSequenceResponse
	(*DeleteIndicesWithPrefixRequest)(nil), // 24: shared.DeleteIndicesWithPrefixRequest
	(*emptypb.Empty)(nil),                  // 25: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),         // 26: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil),         // 27: google.protobuf.UInt64Value
	(*wrapperspb.Int64Value)(nil),          // 28: google.protobuf.Int64Value
}
var file_quanta_proto_depIdxs = []int32{
	7,  // 0: shared.BitmapQuery.query:type_name -> shared.QueryFragment
	0,  // 1: shared.QueryFragment.operation:type_name -> shared.QueryFragment.OpType
	1,  // 2: shared.QueryFragment.bsiOp:type_name -> shared.QueryFragment.BSIOp
	2,  // 3: shared.TableOperationRequest.operation:type_name -> shared.TableOperationRequest.OpType
	19, // 4: shared.QueryResult.samples:type_name -> shared.BitmapResult
	19, // 5: shared.ProjectionResponse.bitmapResults:type_name -> shared.BitmapResult
	20, // 6: shared.ProjectionResponse.bsiResults:type_name -> shared.BSIResult
	25, // 7: shared.ClusterAdmin.Status:input_type -> google.protobuf.Empty
	25, // 8: shared.ClusterAdmin.Shutdown:input_type -> google.protobuf.Empty
	4,  // 9: shared.KVStore.Put:input_type -> shared.IndexKVPair
	4,  // 10: shared.KVStore.BatchPut:input_type -> shared.IndexKVPair
	4,  // 11: shared.KVStore.Lookup:input_type -> shared.IndexKVPair
	4,  // 12: shared.KVStore.BatchLookup:input_type -> shared.IndexKVPair
	26, // 13: shared.KVStore.Items:input_type -> google.protobuf.StringValue
	5,  // 14: shared.KVStore.PutStringEnum:input_type -> shared.StringEnum
	24, // 15: shared.KVStore.DeleteIndicesWithPrefix:input_type -> shared.DeleteIndicesWithPrefixRequest
	16, // 16: shared.KVStore.IndexInfo:input_type -> shared.IndexInfoRequest
	26, // 17: shared.StringSearch.BatchIndex:input_type -> google.protobuf.StringValue
	26, // 18: shared.StringSearch.Search:input_type -> google.protobuf.StringValue
	13, // 19: shared.BitmapIndex.Update:input_type -> shared.UpdateRequest
	4,  // 20: shared.BitmapIndex.BatchMutate:input_type -> shared.IndexKVPair
	12, // 21: shared.BitmapIndex.BulkClear:input_type -> shared.BulkClearRequest
	6,  // 22: shared.BitmapIndex.Query:input_type -> shared.BitmapQuery
	10, // 23: shared.BitmapIndex.Join:input_type -> shared.JoinRequest
	18, // 24: shared.BitmapIndex.Projection:input_type -> shared.ProjectionRequest
	22, // 25: shared.BitmapIndex.CheckoutSequence:input_type -> shared.CheckoutSequenceRequest
	8,  // 26: shared.BitmapIndex.TableOperation:input_type -> shared.TableOperationRequest
	26, // 27: shared.BitmapIndex.Synchronize:input_type -> google.protobuf.StringValue
	14, // 28: shared.BitmapIndex.SyncStatus:input_type -> shared.SyncStatusRequest
	25, // 29: shared.BitmapIndex.Commit:input_type -> google.protobuf.Empty
	3,  // 30: shared.ClusterAdmin.Status:output_type -> shared.StatusMessage
	25, // 31: shared.ClusterAdmin.Shutdown:output_type -> google.protobuf.Empty
	25, // 32: shared.KVStore.Put:output_type -> google.protobuf.Empty
	25, // 33: shared.KVStore.BatchPut:output_type -> google.protobuf.Empty
	4,  // 34: shared.KVStore.Lookup:output_type -> shared.IndexKVPair
	4,  // 35: shared.KVStore.BatchLookup:output_type -> shared.IndexKVPair
	4,  // 36: shared.KVStore.Items:output_type -> shared.IndexKVPair
	27, // 37: shared.KVStore.PutStringEnum:output_type -> google.protobuf.UInt64Value
	25, // 38: shared.KVStore.DeleteIndicesWithPrefix:output_type -> google.protobuf.Empty
	17, // 39: shared.KVStore.IndexInfo:output_type -> shared.IndexInfoResponse
	25, // 40: shared.StringSearch.BatchIndex:output_type -> google.protobuf.Empty
	27, // 41: shared.StringSearch.Search:output_type -> google.protobuf.UInt64Value
	25, // 42: shared.BitmapIndex.Update:output_type -> google.protobuf.Empty
	25, // 43: shared.BitmapIndex.BatchMutate:output_type -> google.protobuf.Empty
	25, // 44: shared.BitmapIndex.BulkClear:output_type -> google.protobuf.Empty
	9,  // 45: shared.BitmapIndex.Query:output_type -> shared.QueryResult
	11, // 46: shared.BitmapIndex.Join:output_type -> shared.JoinResponse
	21, // 47: shared.BitmapIndex.Projection:output_type -> shared.ProjectionResponse
	23, // 48: shared.BitmapIndex.CheckoutSequence:output_type -> shared.CheckoutSequenceResponse
	25, // 49: shared.BitmapIndex.TableOperation:output_type -> google.protobuf.Empty
	28, // 50: shared.BitmapIndex.Synchronize:output_type -> google.protobuf.Int64Value
	15, // 51: shared.BitmapIndex.SyncStatus:output_type -> shared.SyncStatusResponse
	25, // 52: shared.BitmapIndex.Commit:output_type -> google.protobuf.Empty
	30, // [30:53] is the sub-list for method output_type
	7,  // [7:30] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_quanta_proto_init() }
func file_quanta_proto_init() {
	if File_quanta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quanta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexKVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitmapQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitmapResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BSIResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutSequenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutSequenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quanta_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndicesWithPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quanta_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_quanta_proto_goTypes,
		DependencyIndexes: file_quanta_proto_depIdxs,
		EnumInfos:         file_quanta_proto_enumTypes,
		MessageInfos:      file_quanta_proto_msgTypes,
	}.Build()
	File_quanta_proto = out.File
	file_quanta_proto_rawDesc = nil
	file_quanta_proto_goTypes = nil
	file_quanta_proto_depIdxs = nil
}
